# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Get timestamp
      id: timestamp
      if: github.event_name == 'push'
      run: echo "TIMESTAMP=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.0'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Build and Push Docker Image (Push Event)
      if: github.event_name == 'push' && github.ref_type != 'tag'
      run: |
        docker build -t mathieuplateforme/mys3:${{ env.TIMESTAMP }} .
        docker push mathieuplateforme/mys3:${{ env.TIMESTAMP }}

    - name: Build and Push Docker Image (Tag Event)
      if: github.event_name == 'push' && github.ref_type == 'tag'
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}  # Remove 'refs/tags/' from the reference
        docker build -t mathieuplateforme/mys3:${TAG_NAME} .
        docker push mathieuplateforme/mys3:${TAG_NAME}
        docker build -t mathieuplateforme/mys3:dev-latest .
        docker push mathieuplateforme/mys3:dev-latest

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Deploy to Kubernetes
      run: |
          kubectl apply -f ./deployment.yaml
          kubectl apply -f ./services.yaml
          kubectl apply -f ./ingress.yaml
          kubectl apply -f ./pvc.yaml
      working-directory: ./

  notify-result:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always() 
    steps:
    - name: Notify result
      env:
        CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          STATUS="Success"
        else
          STATUS="Failure"
        fi
        if [ "${{ needs.deploy.result }}" == "failure" ]; then
          STATUS="Failure"
        fi
        curl -X POST -H 'Content-Type: application/json' -d "{\"text\": \"Workflow $STATUS: ${{ github.repository }}\"}" $CHAT_WEBHOOK_URL
